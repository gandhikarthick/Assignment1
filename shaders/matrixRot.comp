#version 450
/* built in:
in uvec3 gl_NumWorkGroups;
in uvec3 gl_WorkGroupID;
in uvec3 gl_LocalInvocationID;
in uvec3 gl_GlobalInvocationID;
in uint  gl_LocalInvocationIndex;
*/

layout( local_size_x_id = 0) in;
layout( local_size_y_id = 1) in;

layout(binding = 0) buffer inputBuf {int v1[];};
layout(binding = 1) buffer outBuf {int v2[];};

// Push constant

layout(push_constant) uniform PushStruct {
    uint w;    // Array size
    uint h;    // Array size
} p;


shared int[gl_WorkGroupSize.x*gl_WorkGroupSize.y] shared_ints;

void matrixRotShared() {
    //grab global ID
	uint gIDx = gl_GlobalInvocationID.x;
    uint gIDy = gl_GlobalInvocationID.y;
    uint lSizeX = gl_WorkGroupSize.x;
    uint lSizeY = gl_WorkGroupSize.y;
    //make sure we don't access past the buffer size


    uint lIDx = gl_LocalInvocationID.x;
    uint lIDy = gl_LocalInvocationID.y;

    //! read from global (inputBuf) horizontally, i.e. line by line
    // threads that don't write in the temp buffer might still write in the output!
    if(!(gIDx >= p.w || gIDy >= p.h)) 
        shared_ints[ lIDy * lSizeX + lIDx ] = v1[ gIDy * p.w + gIDx ];
    barrier();
    //! write inside global memory horizontally. The order doesn't matter for the shared(local) memory

    // new indices given dimensions (w,h) are now (h,w)
    uint threadIdx = lIDy * lSizeX + lIDx;
    uint rot_LIDx = threadIdx % lSizeY;
    uint rot_LIDy = threadIdx / lSizeY;

    // index x, y in the new (rotated) frame
  	uint targetY =  lSizeX * gl_WorkGroupID.x + rot_LIDy; // LID.y;
	uint targetX = p.h - lSizeY * (gl_WorkGroupID.y + 1) + rot_LIDx; // LID.x;

    // write horizontally
    if(targetX < p.h && targetY <p.w)
        v2[ targetY * p.h + targetX ] = shared_ints[ (lSizeY - rot_LIDx - 1) *lSizeX + rot_LIDy ];
    
} 

void matrixRotNaive() {
    //grab global ID
	uint gIDx = gl_GlobalInvocationID.x;
    uint gIDy = gl_GlobalInvocationID.y;
    //make sure we don't access past the buffer size
    if(gIDx >= p.w || gIDy >= p.h)
        return;
    v2[ p.h*gIDx + p.h-1 - gIDy ] = v1[p.w * gIDy + gIDx];
} 